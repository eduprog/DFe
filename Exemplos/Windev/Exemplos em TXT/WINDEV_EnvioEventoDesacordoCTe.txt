//Criar as configurações mínimas necessárias para consumir o serviço
oConfiguracao is Unimake.Business.DFe.Servicos.Configuracao()
oConfiguracao.TipoDFe				= TipoDFe.CTe
oConfiguracao.CertificadoArquivo	= "C:\Projetos\certificados\UnimakePV.pfx"
oConfiguracao.CertificadoSenha		= "12345678"

//Criar tag do lote de eventos <eventoCTe>
oEventoCTe			is Unimake.Business.DFe.XML.CTe.EventoCTe
oEventoCTe.Versao	= "4.00"

//Criar tag <detEvento>
oDetEventoPrestDesacordo				is Unimake.Business.DFe.XML.CTe.DetEventoPrestDesacordo
oDetEventoPrestDesacordo.VersaoEvento		= "4.00"
oDetEventoPrestDesacordo.DescEvento			= "Prestacao do Servico em Desacordo"
oDetEventoPrestDesacordo.IndDesacordoOper	= "1"
oDetEventoPrestDesacordo.XObs				= "Teste de manifestacao de servico em desacordo, ambiente de homolocacao"

//Criar tag <infEvento>
oInfEvento is Unimake.Business.DFe.XML.CTe.InfEvento

//Adicionar o Objeto oDetEventoPrestDesacordo dentro do objeto DetEvento
oInfEvento.DetEvento	= oDetEventoPrestDesacordo

//Atualizar propriedades da oInfEvento
//IMPORTANTE: Atualização da propriedade TpEvento deve acontecer depois que o DetEvento recebeu o oDetEventoCanc para que funcione sem erro
oInfEvento.COrgao		= 41 // UFBrasil.PR // Tem que ser o estado de origem do CTe, dois primeiros digitos da chave do CTe que está no evento.
oInfEvento.ChCTe		= "41191006117473000150550010000579281779843610"
oInfEvento.CNPJ			= "06117473000150"
oInfEvento.DhEvento		= SysDateTime()
oInfEvento.TpEvento		= 610110 //TipoEventoCTe.PrestDesacordo
oInfEvento.NSeqEvento	= 1
oInfEvento.TpAmb		= 2 //TipoAmbiente.Homologacao   

//Adicionar a tag <infEvento> dentro da tag <eventoCTe>   
oEventoCTe.InfEvento	= oInfEvento  

EDT_RetornoWSString		= "Versao schema: " + CR + oEventoCTe.Versao + CR + CR
EDT_RetornoWSString    += "CNPJ: " + CR + oEventoCTe.InfEvento.CNPJ + CR + CR

WHEN EXCEPTION IN
	//Consumir o serviço
	oRecepcaoEvento is Unimake.Business.DFe.Servicos.CTe.RecepcaoEvento()
	oRecepcaoEvento.SetXMLConfiguracao(oEventoCTe, oConfiguracao)
	
	eventoAssinado is string = oRecepcaoEvento.GetConteudoXMLAssinado()
	
	EDT_RetornoWSString += "XML Assinado: " + CR + eventoAssinado + CR + CR
	
	// Gravar o XML assinado no HD
	fDelete("d:\testenfe\DesacordoCTe.xml")
	fSaveText("d:\testenfe\DesacordoCTe.xml", eventoAssinado)
	
	oRecepcaoEvento.Executar(oEventoCTe, oConfiguracao)
	
	//Ver retorno da SEFAZ
	EDT_RetornoWSString += "XML Retornado: " + CR + oRecepcaoEvento.RetornoWSString + CR + CR
	
	//Ver o conteúdo da tag CStat e XMotivo 
	oRetEventoCTe is Unimake.Business.DFe.XML.CTe.RetEventoCTe <-oRecepcaoEvento.Result
	EDT_RetornoWSString += "CStat: " + CR + oRetEventoCTe.InfEvento.CStat + CR + CR
	EDT_RetornoWSString += "XMotivo: " + CR + oRetEventoCTe.InfEvento.XMotivo + CR + CR
	
	SWITCH oRetEventoCTe.InfEvento.CStat
		CASE 134, 135, 156
			oRecepcaoEvento.GravarXmlDistribuicao("d:\testenfe")
			
		OTHER CASE
			//Evento rejeitado
			//Realizar as ações necessárias
	END
DO
	Info(ExceptionInfo(errFullDetails)) //Ele também pega o conteúdo da Exception do lado do C#, importante envolver o código em Try/Catch
END