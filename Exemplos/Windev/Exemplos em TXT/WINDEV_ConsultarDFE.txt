//Criar as configurações mínimas necessárias para consumir o serviço
oConfiguracao is Unimake.Business.DFe.Servicos.Configuracao()
oConfiguracao.CertificadoArquivo	= "C:\Projetos\certificados\UnimakePV.pfx"
oConfiguracao.CertificadoSenha		= "12345678"

nsu is string = "000000000000000"

WHEN EXCEPTION IN	
	LOOP
		//Criar o XML 
		oDistDFeInt is Unimake.Business.DFe.XML.NFe.DistDFeInt
		oDistDFeInt.Versao		= "1.35"
		oDistDFeInt.TpAmb		= 1 //1=Homologação
		oDistDFeInt.CNPJ		= "06117473000150"
		oDistDFeInt.CUFAutor	= 41 //UFBrasil.PR
		
		oDistNSU				is Unimake.Business.DFe.XML.NFe.DistNSU
		oDistNSU.UltNSU			= nsu
		
		oDistDFeInt.DistNSU		= oDistNSU
		
		//Consumir o serviço
		oDistribuicaoDFe is Unimake.Business.DFe.Servicos.NFe.DistribuicaoDFe()
		oDistribuicaoDFe.Executar(oDistDFeInt, oConfiguracao)
		
		EDT_RetornoWSString = "XML Retornado:" + CR + CR
		EDT_RetornoWSString += oDistribuicaoDFe.RetornoWSString + CR + CR
		
		//Gravar o XML retornado da receita federal no HD
		fDelete("d:\testenfe\RetornoDfe-" + nsu + ".xml")
		fSaveText("d:\testenfe\RetornoDfe-" + nsu + ".xml", oDistribuicaoDFe.RetornoWSString)
		
		IF oDistribuicaoDFe.Result.CStat = 138 //138=Documentos localizados
			folder is string = "d:\testenfe\doczip"
			
			//Salvar o XML retornados na consulta            
			//<param name="folder">Nome da pasta onde é para salvar os XML</param>
			//<param name="saveXMLSummary">Salvar os arquivos de resumo da NFe e Eventos?</param>
			//<param name="fileNameWithNSU">true=Salva os arquivos da NFe e seus eventos com o nsu no nome do arquivo / false=Salva os arquivos da NFe e seus eventos com o CHAVE da NFe no nome do arquivo</param>
			oDistribuicaoDFe.GravarXMLDocZIP(folder, True, True)
			
			//Como pegar o conteúdo retornado na consulta no formato string
			FOR I = 1 TO oDistribuicaoDFe.Result.LoteDistDFeInt.GetDocZipCount()
				oDocZip is Unimake.Business.DFe.XML.NFe.DocZip <- oDistribuicaoDFe.Result.LoteDistDFeInt.GetDocZip(I-1)
				
				//Conteudo do XML retornado no formato string
				EDT_RetornoWSString += "XML Retornado na consulta:"
				EDT_RetornoWSString += oDocZip.ConteudoXML + CR + CR
				
				cTipoXML is int = oDocZip.TipoXML
				
				//Tipo do XML:
				//1 = XML de resumo de eventos
				//2 = XML de resumo da NFe
				//3 = XML de distribuição de eventos da NFe (XML completo do evento)
				//4 = XML de distribuição da NFe (XML completo da NFe)
				//5 = XML de distribuição de eventos da CTe (XML completo do evento)
				//6 = XML de distribuição do CTe (XML completo do CTe)
				//0 = XML desconhecido
				EDT_RetornoWSString += "TIPO XML: " + cTipoXML + CR + CR
			END
			
			//Como pegar os retornos dos resumos de eventos em objeto
			EDT_RetornoWSString += "Resumos eventos:" + CR
			FOR I = 1 TO oDistribuicaoDFe.GetResEventosCount()
				oResEvento is Unimake.Business.DFe.XML.NFe.ResEvento <- oDistribuicaoDFe.GetResEvento(I-1)
				
				EDT_RetornoWSString += oResEvento.ChNFe + CR
				EDT_RetornoWSString += oResEvento.CNPJ + CR + CR
			END
			
			//Como pegar os retornos dos resumos de NFe em objeto
			EDT_RetornoWSString += "Resumos NFe´s:" + CR
			FOR I = 1 TO oDistribuicaoDFe.GetResNFeCount()
				oResNFe is Unimake.Business.DFe.XML.NFe.ResNFe <- oDistribuicaoDFe.GetResNFe(I-1)
				
				EDT_RetornoWSString += oResNFe.ChNFe + CR
				EDT_RetornoWSString += oResNFe.CNPJ + CR + CR
				EDT_RetornoWSString += oResNFe.VNF + CR 
				EDT_RetornoWSString += oResNFe.XNome  + CR + CR 
			END
			
			//Como pegar os retornos dos XML de Distribuição dos Eventos (XML completos dos eventos)
			EDT_RetornoWSString += "Eventos NFe:" + CR
			FOR I = 1 TO oDistribuicaoDFe.GetProcEventoNFesCount()
				oProcEventoNFe is Unimake.Business.DFe.XML.NFe.ProcEventoNFe <- oDistribuicaoDFe.GetProcEventoNFes(I-1)
				
				EDT_RetornoWSString += oProcEventoNFe.Evento.InfEvento.CNPJ + CR
				EDT_RetornoWSString += oProcEventoNFe.Evento.InfEvento.ChNFe + CR + CR
			END
			
			//Como pegar os retornos dos XML de Distribuição das NFes (XML completos das NFes)
 			EDT_RetornoWSString += "NFe´s:" + CR
			FOR I = 1 TO oDistribuicaoDFe.GetProcNFesCount()
				oNfeProc	is Unimake.Business.DFe.XML.NFe.NfeProc	<- oDistribuicaoDFe.GetProcNFes(I-1)
				oInfNFe		is Unimake.Business.DFe.XML.NFe.InfNFe	<- oNfeProc.NFe.GetInfNFe(0)
				
				CUFInt		is int									= oInfNFe.Ide.CUF
				
				EDT_RetornoWSString += oInfNFe.ID + CR
				EDT_RetornoWSString += CUFInt + CR
				EDT_RetornoWSString += oInfNFe.IDE.CNF + CR
				EDT_RetornoWSString += oNfeProc.ProtNFe.InfProt.ChNFe + CR
				EDT_RetornoWSString += oNfeProc.ProtNFe.InfProt.NProt + CR + CR
			END
			
			nsu = oDistribuicaoDFe.Result.UltNSU //Proximo NSU a ser consultado, não mude isso
			
			IF oDistribuicaoDFe.Result.UltNSU = oDistribuicaoDFe.Result.MaxNSU
				//Abandonar o LOOP e aguardar 1h10m para proxima consulta
				BREAK
			END		
		ELSE
			IF oDistribuicaoDFe.Result.CStat = 656 //Consumo indevido
				//Pausar consultas por 1h10m
				nsu = oDistribuicaoDFe.Result.UltNSU //Proximo NSU a ser consultado, não mude isso
				BREAK
			ELSE
				IF oDistribuicaoDFe.Result.CStat = 137 //Nenhum documento localizado
					nsu = oDistribuicaoDFe.Result.UltNSU //Proximo NSU a ser consultado, não mude isso
					BREAK
				END			
			END
		END
	END
	
	//Lembrar de salvar o conteúdo da variável "nsu" na base, pois ela vai ter o ultNSU retornado para ser consultado depois de 1h10m
DO
	Info(ExceptionInfo(errFullDetails)) //Ele também pega o conteúdo da Exception do lado do C#, importante envolver o código em Try/Catch
END
