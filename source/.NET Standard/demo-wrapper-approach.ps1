# Script para demonstrar o uso das classes wrapper

Write-Host "=== Demonstra√ß√£o: Source Generators com Classes Wrapper ===" -ForegroundColor Green

Write-Host ""
Write-Host "üéØ PROBLEMA RESOLVIDO:" -ForegroundColor Yellow
Write-Host "‚úÖ N√£o modificamos o projeto base Unimake.Business.DFe" -ForegroundColor Green
Write-Host "‚úÖ Criamos classes wrapper que herdam das originais" -ForegroundColor Green  
Write-Host "‚úÖ Configuramos DTOs via atributos nas classes wrapper" -ForegroundColor Green
Write-Host "‚úÖ DTOs s√£o gerados automaticamente em tempo de compila√ß√£o" -ForegroundColor Green

Write-Host ""
Write-Host "üìÅ ESTRUTURA CRIADA:" -ForegroundColor Cyan
Write-Host "source/.NET Standard/" -ForegroundColor White
Write-Host "‚îú‚îÄ‚îÄ Unimake.Business.DFe                    # ‚ùå PROJETO BASE (N√ÉO MODIFICADO)" -ForegroundColor Gray
Write-Host "‚îú‚îÄ‚îÄ Unimake.Business.DFe.SourceGenerators   # ‚öôÔ∏è  SOURCE GENERATOR" -ForegroundColor Yellow
Write-Host "‚îî‚îÄ‚îÄ Unimake.Business.DFe.SourceGenerators.Wrappers # üîß CLASSES WRAPPER" -ForegroundColor Green

Write-Host ""
Write-Host "üîß COMO FUNCIONA:" -ForegroundColor Cyan

Write-Host ""
Write-Host "1Ô∏è‚É£  CLASSE WRAPPER:" -ForegroundColor Yellow
Write-Host @"
[SourceGeneratorConfig(typeof(EnviNFe), DtoType.IncluirRequest, DtoType.AtualizarRequest)]
[PropertyConfig("Versao", RequiredForTypes = new[] { DtoType.IncluirRequest })]
[PropertyConfig("IdLote", RequiredForTypes = new[] { DtoType.IncluirRequest, DtoType.AtualizarRequest })]
[PropertyConfig("NFe", CustomName = "NotasFiscais")]
public class EnviNFeWrapper : EnviNFe
{
    // Esta classe s√≥ serve para configura√ß√£o
    // Herda tudo da classe original
}
"@ -ForegroundColor Gray

Write-Host ""
Write-Host "2Ô∏è‚É£  DTO GERADO AUTOMATICAMENTE:" -ForegroundColor Yellow
Write-Host @"
// EnviNFeIncluirRequest.g.cs (GERADO AUTOMATICAMENTE)
namespace Unimake.Business.DFe.Dtos.NFe
{
    public partial class EnviNFeIncluirRequest
    {
        [Required]
        [JsonPropertyName("versao")]
        public string Versao { get; set; }

        [Required]
        [JsonPropertyName("idLote")]
        public string IdLote { get; set; }

        [JsonPropertyName("indSinc")]
        public SimNao IndSinc { get; set; }

        [JsonPropertyName("notasFiscais")]
        public List<NFe> NotasFiscais { get; set; }
    }
}
"@ -ForegroundColor Gray

Write-Host ""
Write-Host "3Ô∏è‚É£  USO EM API:" -ForegroundColor Yellow
Write-Host @"
[HttpPost]
public async Task<IActionResult> IncluirNFe([FromBody] EnviNFeIncluirRequest request)
{
    // Converter DTO para classe original (SEM MODIFICA√á√ïES)
    var enviNFe = new EnviNFe
    {
        Versao = request.Versao,
        IdLote = request.IdLote,
        IndSinc = request.IndSinc,
        NFe = request.NotasFiscais
    };

    // Usar normalmente as classes originais
    var xml = enviNFe.GerarXML();
    
    return Ok();
}
"@ -ForegroundColor Gray

Write-Host ""
Write-Host "üöÄ VANTAGENS DESTA ABORDAGEM:" -ForegroundColor Cyan
Write-Host "‚úÖ Projeto base intocado - pode atualizar normalmente" -ForegroundColor Green
Write-Host "‚úÖ DTOs sempre sincronizados - qualquer mudan√ßa no base √© refletida" -ForegroundColor Green
Write-Host "‚úÖ Configura√ß√£o flex√≠vel - controle granular por propriedade" -ForegroundColor Green
Write-Host "‚úÖ Performance - zero overhead em runtime" -ForegroundColor Green
Write-Host "‚úÖ Type Safety - heran√ßa mant√©m compatibilidade" -ForegroundColor Green
Write-Host "‚úÖ Isolamento - configura√ß√µes ficam em projeto separado" -ForegroundColor Green

Write-Host ""
Write-Host "üìã PR√ìXIMOS PASSOS:" -ForegroundColor Cyan
Write-Host "1. Compile o projeto Wrappers para gerar os DTOs:" -ForegroundColor White
Write-Host "   dotnet build Unimake.Business.DFe.SourceGenerators.Wrappers" -ForegroundColor Gray

Write-Host ""
Write-Host "2. Verifique os DTOs gerados em:" -ForegroundColor White
Write-Host "   obj/Debug/netstandard2.0/generated/" -ForegroundColor Gray

Write-Host ""
Write-Host "3. Use os DTOs em suas APIs:" -ForegroundColor White
Write-Host "   - EnviNFeIncluirRequest" -ForegroundColor Gray
Write-Host "   - EnviNFeAtualizarRequest" -ForegroundColor Gray
Write-Host "   - EnviNFeConsultarRequest" -ForegroundColor Gray

Write-Host ""
Write-Host "4. Configure mais wrappers conforme necess√°rio:" -ForegroundColor White
Write-Host "   - NFeWrapper para NFe individual" -ForegroundColor Gray
Write-Host "   - InfNFeWrapper para informa√ß√µes da NFe" -ForegroundColor Gray
Write-Host "   - IdeWrapper para identifica√ß√£o" -ForegroundColor Gray

Write-Host ""
Write-Host "üí° DICA:" -ForegroundColor Yellow
Write-Host "Se precisar de DTOs para outras classes, apenas:" -ForegroundColor White
Write-Host "1. Crie uma classe wrapper herdando da original" -ForegroundColor Gray
Write-Host "2. Adicione os atributos de configura√ß√£o" -ForegroundColor Gray
Write-Host "3. Compile e use os DTOs gerados" -ForegroundColor Gray

Write-Host ""
Write-Host "=== SOLU√á√ÉO IMPLEMENTADA COM SUCESSO! ===" -ForegroundColor Green
